---
title: ...or over-engineering for fun, not profit
id: slide-011
slide:
  :image_url: http://assets.h-lame.com/images/talks/names-from-a-hat/slides/011.png
  :image_alt: "text: Names from a hat or Over-engineering for fun, not profit; Murray Steele Cleo, @hlame@ruby.social; RubyConf"
  :image_title: "Slide 11: ...or over-engineering for fun, not profit"
---
...thankfully, an alternative title for this talk is "Over-engineering for fun not profit".

Now, I'm an Engineering Manager for a company called [Cleo](https://meetcleo.com/). We're a fintech building an AI assistant that turns the complexity of personal finances into a conversation – the same kind youʼd have with a friend – and supports people throughout their financial lives.<% fnrf 3 %>

At work what's important is shipping the smallest possible thing that lets us deliver value to users or the business (ideally both).  We do this by building on top of:

* existing features
* [gems](https://rubygems.org)
* 3rd party service providers
* and so on

This lets us move quickly to build the simplest thing that will meet the requirements, and we’re not afraid to shrink the requirements to help us get something out sooner so we can learn.  Why build an all-singing, all-dancing feature in the product, when a landing page test might let us learn as much, and sooner?  What I’m saying is:

Over-engineering is bad... _at work_.

But, _this_ is “Weird Ruby” not “Best Practices Thought-Leader Ruby”, so let’s quiet that “EM at a startup” voice down a bit.  I’m here to sing the praises of over-engineering _for fun_.  We're going to do that by exploring some of the ways I've personally over-engineered calling `Array#sample` or `Array#shuffle` while wearing my LRUG organiser hat.  Along the way, because we should embrace all facets of ourselves, that “EM at a startup” voice might pop up with some thoughts on why the occasional bit of recreational over-engineering is good … actually?

*[AI]: Artificial Intelligence
*[EM]: Engineering Manager
*[LRUG]: London Ruby User Group
